"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var updateNotifier = require("update-notifier");
var shell = require("shelljs");
var path = require("path");
var json = require("jsonfile");
var PKG = require("../package.json");
var utils_1 = require("./utils");
var pkg = PKG;
updateNotifier({ pkg: pkg }).notify();
if (!shell.test('-d', path.join(utils_1.HOME_PATH, utils_1.KCM_DIR))) {
    shell.mkdir(path.join(utils_1.HOME_PATH, utils_1.KCM_DIR));
}
if (!shell.test('-e', utils_1.KCM_CONFIG_PATH)) {
    console.log('No kcm config, creating one.');
    json.writeFileSync(utils_1.KCM_CONFIG_PATH, {});
}
var CFG = json.readFileSync(utils_1.KCM_CONFIG_PATH);
program
    .version(pkg.version)
    .description('Multiple k8s configuration manager');
program
    .command('add <folder_path> [name]')
    .description('Add a config with a defined name')
    .alias('a')
    .action(function (folderPath, name) {
    name = (name) ? Array.isArray(name) ? name.join(' ') : name : 'old';
    if (!shell.test('-d', path.resolve(folderPath))) {
        console.log("Cant resolve path of the folder " + folderPath);
    }
    else {
        shell.cp('-R', path.resolve(folderPath), utils_1.kmcPath(name));
        console.log("Copied config to " + utils_1.kmcPath(name));
    }
    utils_1.exec.on();
});
program
    .command('use <name>')
    .description('Put the config you want in `.kube` to use it with `kubectl`')
    .action(function (name) {
    name = (name) ? Array.isArray(name) ? name.join(' ') : name : 'old';
    if (!shell.test('-d', utils_1.kmcPath(name))) {
        console.log("Cant resolve path of the folder " + utils_1.kmcPath(name));
        utils_1.exec.on();
        return;
    }
    var files = shell.ls(utils_1.KUBE_PATH)
        .map(function (f) { return f; });
    if (files.length > 0) {
        console.log("Warning: '.kube' is not empty, making a backup in " + utils_1.kmcPath('_backup'));
        shell.cp('-R', path.resolve(utils_1.KUBE_PATH, '*'), utils_1.kmcPath('_backup'));
    }
    console.log(name + " config actived");
    shell.cp('-R', utils_1.kmcPath(name, '*'), utils_1.KUBE_PATH);
    CFG.using = name;
    json.writeFileSync(utils_1.KCM_CONFIG_PATH, CFG);
    utils_1.exec.on();
});
program
    .command('now')
    .description('Shows actual config')
    .action(function (name) {
    if (CFG.using) {
        console.log("Using config: " + CFG.using);
        utils_1.exec.on();
        return;
    }
    console.log("Any kcm predefined config is using rigth now.");
    var files = shell.ls(utils_1.KUBE_PATH).map(function (f) { return f; });
    if (files.length > 0) {
        console.log("Your .kube folder have a config right now. Remember that you can save it doing:\n> 'kcm add " + utils_1.KUBE_PATH + " <name_you_want>'\n");
    }
    utils_1.exec.on();
});
program
    .command('ls')
    .description('Show stored config in `.kcm`')
    .action(function () {
    var files = shell.ls(utils_1.KCM_PATH)
        .map(function (f) { return f; })
        .filter(function (f) { return f !== utils_1.KCM_FILE; });
    if (files.length === 0) {
        console.log("You dont have any predefined config in kcm, lets add one with 'kcm add PATH_OF_KUBE NAME'");
    }
    else {
        console.log('You this config availables:');
        files.forEach(function (name) {
            console.log(" - " + name + " " + (CFG.using === name ? '(actual)' : ''));
        });
    }
    utils_1.exec.on();
});
program
    .parse(process.argv);
if (!utils_1.exec.is()) {
    console.log('You must use a valid command.');
    program.outputHelp();
    process.exit(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBb0M7QUFDcEMsZ0RBQWlEO0FBQ2pELCtCQUFnQztBQUNoQywyQkFBNEI7QUFDNUIsK0JBQWdDO0FBRWhDLHFDQUFzQztBQUN0QyxpQ0FBMEc7QUFFMUcsSUFBTSxHQUFHLEdBQVEsR0FBRyxDQUFBO0FBRXBCLGNBQWMsQ0FBQyxFQUFDLEdBQUcsS0FBQSxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUU5QixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQVMsRUFBRSxlQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRCxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQVMsRUFBRSxlQUFPLENBQUMsQ0FBQyxDQUFBO0FBQzlDLENBQUM7QUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLHVCQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO0lBQzNDLElBQUksQ0FBQyxhQUFhLENBQUMsdUJBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUMzQyxDQUFDO0FBRUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyx1QkFBZSxDQUFDLENBQUE7QUFFNUMsT0FBTztLQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO0tBQ3BCLFdBQVcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFBO0FBRXRELE9BQU87S0FDRixPQUFPLENBQUMsMEJBQTBCLENBQUM7S0FDbkMsV0FBVyxDQUFDLGtDQUFrQyxDQUFDO0tBQy9DLEtBQUssQ0FBQyxHQUFHLENB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QUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUE7UUFDMUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7WUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQU0sSUFBSSxVQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQUE7UUFDckUsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsWUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBQ2IsQ0FBQyxDQUFDLENBQUE7QUFFTixPQUFPO0tBQ0YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUV4QixFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUE7SUFDNUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDbkIsQ0FBQyJ9