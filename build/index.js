"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var updateNotifier = require("update-notifier");
var shell = require("shelljs");
var path = require("path");
var json = require("jsonfile");
var PKG = require("../package.json");
var utils_1 = require("./utils");
var pkg = PKG;
updateNotifier({ pkg: pkg }).notify();
if (!shell.test('-d', utils_1.KCM_PATH)) {
    shell.mkdir(utils_1.KCM_PATH);
}
if (!shell.test('-d', utils_1.BACK_PATH)) {
    shell.mkdir(utils_1.BACK_PATH);
}
if (!shell.test('-e', utils_1.KCM_CONFIG_PATH)) {
    console.log('No kcm config, creating one.');
    json.writeFileSync(utils_1.KCM_CONFIG_PATH, {});
}
var CFG = json.readFileSync(utils_1.KCM_CONFIG_PATH);
program.version(pkg.version).description('Multiple k8s configuration manager');
program
    .command('add <folder_path> [name]')
    .description('Add a config with a defined name')
    .alias('a')
    .action(function (folderPath, name) {
    name = name ? (Array.isArray(name) ? name.join(' ') : name) : 'default';
    if (!shell.test('-d', path.resolve(folderPath))) {
        console.log("Cant resolve path of the folder " + folderPath);
    }
    else {
        shell.cp('-R', path.resolve(folderPath), utils_1.kmcPath(name));
        console.log("Copied config to " + utils_1.kmcPath(name));
    }
    utils_1.exec.on();
});
program
    .command('use [name]')
    .description('Put the config you want in `.kube` to use it with `kubectl`')
    .action(function (name) {
    name = name ? (Array.isArray(name) ? name.join(' ') : name) : 'default';
    if (!shell.test('-d', utils_1.kmcPath(name))) {
        console.log("Cant resolve path of the folder " + utils_1.kmcPath(name));
        utils_1.exec.on();
        return;
    }
    var files = shell.ls(utils_1.KUBE_PATH).map(function (f) { return f; });
    if (files.length > 0) {
        console.log("Warning: '.kube' is not empty, making a backup in " + utils_1.BACK_PATH);
        shell.cp('-R', path.resolve(utils_1.KUBE_PATH, '*'), utils_1.BACK_PATH);
    }
    console.log(name + " config actived");
    shell.cp('-R', utils_1.kmcPath(name, '*'), utils_1.KUBE_PATH);
    CFG.using = name;
    json.writeFileSync(utils_1.KCM_CONFIG_PATH, CFG);
    utils_1.exec.on();
});
program
    .command('now')
    .description('Shows actual config')
    .action(function (name) {
    if (CFG.using) {
        console.log("Using config: " + CFG.using);
        utils_1.exec.on();
        return;
    }
    console.log("Any kcm predefined config is using rigth now.");
    var files = shell.ls(utils_1.KUBE_PATH).map(function (f) { return f; });
    if (files.length > 0) {
        console.log("Your .kube folder have a config right now. Remember that you can save it doing:\n> 'kcm add " + utils_1.KUBE_PATH + " <name_you_want>'\n");
    }
    utils_1.exec.on();
});
program
    .command('ls')
    .description('Show stored config in `.kcm`')
    .action(function () {
    var files = shell
        .ls(utils_1.KCM_PATH)
        .map(function (f) { return f; })
        .filter(function (f) { return f !== utils_1.KCM_FILE; });
    if (files.length === 0) {
        console.log("You dont have any predefined config in kcm, lets add one with 'kcm add PATH_OF_KUBE NAME'");
    }
    else {
        console.log('You this config availables:');
        files.forEach(function (name) {
            console.log(" - " + name + " " + (CFG.using === name ? '(actual)' : ''));
        });
    }
    utils_1.exec.on();
});
program.parse(process.argv);
if (!utils_1.exec.is()) {
    console.log('You must use a valid command.');
    program.outputHelp();
    process.exit(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBcUM7QUFDckMsZ0RBQWtEO0FBQ2xELCtCQUFpQztBQUNqQywyQkFBNkI7QUFDN0IsK0JBQWlDO0FBRWpDLHFDQUF1QztBQUN2QyxpQ0FRaUI7QUFFakIsSUFBTSxHQUFHLEdBQVEsR0FBRyxDQUFDO0FBRXJCLGNBQWMsQ0FBQyxFQUFFLEdBQUcsS0FBQSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVqQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsS0FBSyxDQUFDLEtBQUssQ0FBQyxnQkFBUSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsaUJBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixLQUFLLENBQUMsS0FBSyxDQUFDLGlCQUFTLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSx1QkFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUM1QyxJQUFJLENBQUMsYUFBYSxDQUFDLHVCQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsdUJBQWUsQ0FBQyxDQUFDO0FBRTdDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0FBRS9FLE9BQU87S0FDRixPQUFPLENBQUMs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O0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDM0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7WUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQU0sSUFBSSxVQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQUM7UUFDdEUsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsWUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ2QsQ0FBQyxDQUFDLENBQUM7QUFFUCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUU1QixFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFDN0MsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEIsQ0FBQyJ9