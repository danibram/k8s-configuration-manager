"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var json = require("jsonfile");
var path = require("path");
var shell = require("shelljs");
var updateNotifier = require("update-notifier");
var PKG = require("../package.json");
var utils_1 = require("./utils");
var pkg = PKG;
updateNotifier({ pkg: pkg }).notify();
if (!shell.test('-d', utils_1.KCM_PATH)) {
    shell.mkdir(utils_1.KCM_PATH);
}
if (!shell.test('-d', utils_1.BACK_PATH)) {
    shell.mkdir(utils_1.BACK_PATH);
}
if (!shell.test('-e', utils_1.KCM_CONFIG_PATH)) {
    console.log('No kcm config, creating one.');
    json.writeFileSync(utils_1.KCM_CONFIG_PATH, {});
}
var CFG = json.readFileSync(utils_1.KCM_CONFIG_PATH);
program.version(pkg.version).description('Multiple k8s configuration manager');
program
    .command('add <folder_path> [name]')
    .description('Add a config with a defined name')
    .alias('a')
    .action(function (folderPath, name) {
    name = name ? (Array.isArray(name) ? name.join(' ') : name) : 'default';
    if (!shell.test('-d', path.resolve(folderPath))) {
        console.log("Cant resolve path of the folder " + folderPath);
    }
    else {
        shell.cp('-R', path.resolve(folderPath), utils_1.kmcPath(name));
        console.log("Copied config to " + utils_1.kmcPath(name));
    }
    utils_1.exec.on();
});
program
    .command('use [name]')
    .description('Put the config you want in `.kube` to use it with `kubectl`')
    .action(function (name) {
    name = name ? (Array.isArray(name) ? name.join(' ') : name) : 'default';
    if (!shell.test('-d', utils_1.kmcPath(name))) {
        console.log("Cant resolve path of the folder " + utils_1.kmcPath(name));
        utils_1.exec.on();
        return;
    }
    var files = shell.ls(utils_1.KUBE_PATH).map(function (f) { return f; });
    if (files.length > 0) {
        console.log("Warning: '.kube' is not empty, making a backup in " + utils_1.BACK_PATH);
        shell.cp('-R', path.resolve(utils_1.KUBE_PATH, '*'), utils_1.BACK_PATH);
    }
    console.log(name + " config actived");
    shell.cp('-R', utils_1.kmcPath(name, '*'), utils_1.KUBE_PATH);
    CFG.using = name;
    json.writeFileSync(utils_1.KCM_CONFIG_PATH, CFG);
    utils_1.exec.on();
});
program
    .command('now')
    .description('Shows actual config')
    .action(function (name) {
    if (CFG.using) {
        console.log("Using config: " + CFG.using);
        utils_1.exec.on();
        return;
    }
    console.log("Any kcm predefined config is using rigth now.");
    var files = shell.ls(utils_1.KUBE_PATH).map(function (f) { return f; });
    if (files.length > 0) {
        console.log("Your .kube folder have a config right now. Remember that you can save it doing:\n> 'kcm add " + utils_1.KUBE_PATH + " <name_you_want>'\n");
    }
    utils_1.exec.on();
});
program
    .command('ls')
    .description('Show stored config in `.kcm`')
    .action(function () {
    var files = shell
        .ls(utils_1.KCM_PATH)
        .map(function (f) { return f; })
        .filter(function (f) { return f !== utils_1.KCM_FILE; });
    if (files.length === 0) {
        console.log("You dont have any predefined config in kcm, lets add one with 'kcm add PATH_OF_KUBE NAME'");
    }
    else {
        console.log('You this config availables:');
        files.forEach(function (name) {
            console.log(" - " + name + " " + (CFG.using === name ? '(actual)' : ''));
        });
    }
    utils_1.exec.on();
});
program.parse(process.argv);
if (!utils_1.exec.is()) {
    console.log('You must use a valid command.');
    program.outputHelp();
    process.exit(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBb0M7QUFDcEMsK0JBQWdDO0FBQ2hDLDJCQUE0QjtBQUM1QiwrQkFBZ0M7QUFDaEMsZ0RBQWlEO0FBRWpELHFDQUFzQztBQUN0QyxpQ0FRZ0I7QUFFaEIsSUFBTSxHQUFHLEdBQVEsR0FBRyxDQUFBO0FBRXBCLGNBQWMsQ0FBQyxFQUFFLEdBQUcsS0FBQSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUVoQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsZ0JBQVEsQ0FBQyxFQUFFO0lBQzdCLEtBQUssQ0FBQyxLQUFLLENBQUMsZ0JBQVEsQ0FBQyxDQUFBO0NBQ3hCO0FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGlCQUFTLENBQUMsRUFBRTtJQUM5QixLQUFLLENBQUMsS0FBSyxDQUFDLGlCQUFTLENBQUMsQ0FBQTtDQUN6QjtBQUVELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSx1QkFBZSxDQUFDLEVBQUU7SUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO0lBQzNDLElBQUksQ0FBQyxhQUFhLENBQUMsdUJBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQTtDQUMxQztBQUVELElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsdUJBQWUsQ0FBQyxDQUFBO0FBRTlDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFBO0FBRTlFLE9BQU87S0FDRixPQUFPLENBQUMsMEJBQTBCLENBQUM7S0FDbkMsV0FBVyxDQUFDLGtDQUFrQyxDQUFDO0tBQy9DLEtBQUssQ0FBQyxHQUFHLENBQUM7S0FDVixNQUFN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