"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var json = require("jsonfile");
var path = require("path");
var shell = require("shelljs");
var updateNotifier = require("update-notifier");
var PKG = require("../package.json");
var utils_1 = require("./utils");
var pkg = PKG;
updateNotifier({ pkg: pkg }).notify();
if (!shell.test('-d', utils_1.KCM_PATH)) {
    shell.mkdir(utils_1.KCM_PATH);
}
if (!shell.test('-d', utils_1.BACK_PATH)) {
    shell.mkdir(utils_1.BACK_PATH);
}
if (!shell.test('-e', utils_1.KCM_CONFIG_PATH)) {
    console.log('No kcm config, creating one.');
    json.writeFileSync(utils_1.KCM_CONFIG_PATH, {});
}
var CFG = json.readFileSync(utils_1.KCM_CONFIG_PATH);
program.version(pkg.version).description('Multiple k8s configuration manager');
program
    .command('add <fileOrFolderPath> [name]')
    .description("Copy contained config or file config with the specified with the folder name under 'kcm' folder")
    .alias('a')
    .action(function (fileOrFolderPath, name) {
    name = name ? (Array.isArray(name) ? name.join(' ') : name) : 'default';
    if (shell.test('-d', path.resolve(fileOrFolderPath))) {
        shell.cp('-R', path.resolve(fileOrFolderPath), utils_1.kmcPath(name));
        console.log("Copied config folder to " + utils_1.kmcPath(name));
    }
    else if (shell.test('-d', path.resolve(fileOrFolderPath))) {
        shell.cp(path.resolve(fileOrFolderPath), utils_1.kmcPath(name));
        console.log("Copied config file to " + utils_1.kmcPath(name));
    }
    else {
        console.log("Cant resolve path of the folder " + fileOrFolderPath);
    }
    utils_1.exec.on();
});
program
    .command('use [name]')
    .description('Put the config you want in `.kube` to use it with `kubectl`')
    .action(function (name) {
    name = name ? (Array.isArray(name) ? name.join(' ') : name) : 'default';
    if (!shell.test('-d', utils_1.kmcPath(name))) {
        console.log("Cant resolve path of the folder " + utils_1.kmcPath(name));
        utils_1.exec.on();
        return;
    }
    var files = shell.ls(utils_1.KUBE_PATH).map(function (f) { return f; });
    if (files.length > 0) {
        console.log("Warning: '.kube' is not empty, making a backup in " + utils_1.BACK_PATH);
        shell.cp('-R', path.resolve(utils_1.KUBE_PATH, '*'), utils_1.BACK_PATH);
    }
    console.log(name + " config actived");
    shell.cp('-R', utils_1.kmcPath(name, '*'), utils_1.KUBE_PATH);
    CFG.using = name;
    json.writeFileSync(utils_1.KCM_CONFIG_PATH, CFG);
    utils_1.exec.on();
});
program
    .command('now')
    .description('Shows actual config')
    .action(function (name) {
    if (CFG.using) {
        console.log("Using config: " + CFG.using);
        utils_1.exec.on();
        return;
    }
    console.log("Any kcm predefined config is using rigth now.");
    var files = shell.ls(utils_1.KUBE_PATH).map(function (f) { return f; });
    if (files.length > 0) {
        console.log("Your .kube folder have a config right now. Remember that you can save it doing:\n> 'kcm add " + utils_1.KUBE_PATH + " <name_you_want>'\n");
    }
    utils_1.exec.on();
});
program
    .command('ls')
    .description('Show stored config in `.kcm`')
    .action(function () {
    var files = shell
        .ls(utils_1.KCM_PATH)
        .map(function (f) { return f; })
        .filter(function (f) { return f !== utils_1.KCM_FILE; });
    if (files.length === 0) {
        console.log("You dont have any predefined config in kcm, lets add one with 'kcm add PATH_OF_KUBE NAME'");
    }
    else {
        console.log('You this config availables:');
        files.forEach(function (name) {
            console.log(" - " + name + " " + (CFG.using === name ? '(actual)' : ''));
        });
    }
    utils_1.exec.on();
});
program.parse(process.argv);
if (!utils_1.exec.is()) {
    console.log('You must use a valid command.');
    program.outputHelp();
    process.exit(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBb0M7QUFDcEMsK0JBQWdDO0FBQ2hDLDJCQUE0QjtBQUM1QiwrQkFBZ0M7QUFDaEMsZ0RBQWlEO0FBQ2pELHFDQUFzQztBQUN0QyxpQ0FRZ0I7QUFFaEIsSUFBTSxHQUFHLEdBQVEsR0FBRyxDQUFBO0FBRXBCLGNBQWMsQ0FBQyxFQUFFLEdBQUcsS0FBQSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUVoQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsZ0JBQVEsQ0FBQyxFQUFFO0lBQzdCLEtBQUssQ0FBQyxLQUFLLENBQUMsZ0JBQVEsQ0FBQyxDQUFBO0NBQ3hCO0FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGlCQUFTLENBQUMsRUFBRTtJQUM5QixLQUFLLENBQUMsS0FBSyxDQUFDLGlCQUFTLENBQUMsQ0FBQTtDQUN6QjtBQUVELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSx1QkFBZSxDQUFDLEVBQUU7SUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO0lBQzNDLElBQUksQ0FBQyxhQUFhLENBQUMsdUJBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQTtDQUMxQztBQUVELElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsdUJBQWUsQ0FBQyxDQUFBO0FBRTlDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFBO0FBRTlFLE9BQU87S0FDRixPQUFPLENBQUMsK0JBQStCLENBQUM7S0FDeEMsV0FBVyxDQUNSLGlHQUFpRyxDQUNwRztLQUNBLEtBQUssQ0FBQyxHQUFHLENBQUM7S0FDVixNQUFN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